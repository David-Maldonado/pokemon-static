---
import type { GetStaticPaths } from 'astro';
import type { PokemonListResponse } from '@interfaces/pokemon-list.response';
import { Icon} from 'astro-icon/components';

import PokemonCard from '@components/pokemons/PokemonCard.astro';
import MainLayout from '@layouts/MainLayout.astro';
import Title from 'src/shared/Title.astro';

export const getStaticPaths = (async () => {
  const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=200');
  const { results } = (await resp.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name: name },
    props: { name: name, url: url },
  }));

  // return [
  //   {
  //     params: { name: 'bulbasaur' },
  //     props: { name: 'bulbasaur', url: 'https://pokeapi.co/api/v2/pokemon/1/' },
  //   },
  //   {
  //     params: { name: 'charmander' },
  //     props: { name: 'bulbasaur', url: 'https://pokeapi.co/api/v2/pokemon/4/' },
  //   },
  // ];
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon - #${id} ${name}`}
  description={`Información sobre el pokémon ${name}`}
  image={imageSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
<div class="flex flex-row">
  <div>
    <!-- <a href="/">Regresar</a> -->
    <button onclick="history.back()" class="text-blue-500">Regresar</button>
    <!-- <h1 class="text-5xl capitalize">{name}</h1> -->
    <Title>{name}</Title>
  </div>
  <button class="ml-4" id="btn-favorite" data-name={name} data-id={id}>
    <Icon data-outline name="heart-outline" size={50}/>
    <Icon data-full class="hidden" name="heart-full" size={50}/>
  </button>
</div>
    <PokemonCard name={name} url={url} isBig />

    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<script>
  //no olvidar que se puede usar todo el "poder" de ts aquí

interface FavoritePokemon {
  name:string;
  id:number;  
}

//es una forma de usar el script porque la transition lo bloquea
const handlePageLoad = () => {

// el localstorage solo admite strings
  let favoritePokemons : FavoritePokemon[] = JSON.parse(
  localStorage.getItem('favorites') ?? '[]'
  )

  const btnFavorite = document.querySelector('#btn-favorite') as HTMLButtonElement;

  if(!btnFavorite) return;
  //esto es propio de js para obtener valores a traves del data-
const name = btnFavorite.dataset.name ?? '';
const id = btnFavorite.dataset.id ?? '';
const isFavorite =  favoritePokemons.some( (fav) => fav.name === name);


const heartOutline =  btnFavorite.querySelector('[data-outline]') as HTMLElement;
const heartFull =  btnFavorite.querySelector('[data-full]') as HTMLElement;

if(isFavorite){
  heartOutline.classList.add('hidden')
  heartFull.classList.remove('hidden')
}


const toogleFavorite = () => {

  //some encuentra una condicion que sea true ya deja de evaluar lo demás
  const isFavorite =  favoritePokemons.some( (fav) => fav.name === name);

  if(isFavorite) {
    //si ya está en la lista de favoritos lo quita y si no lo agrega en el array que se almacena en el localstorage
 favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
  } else {
    favoritePokemons.push(
      {
        id: +id, 
        name: name
      }
    )
  }

  localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
}

btnFavorite.addEventListener('click', () => {
  heartOutline.classList.toggle('hidden');
  heartFull.classList.toggle('hidden');

  toogleFavorite();
})
}

document.addEventListener('astro:page-load', handlePageLoad);


</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }
  #btn-favorite {
    @apply hover:animate-pulse
  }
</style>
